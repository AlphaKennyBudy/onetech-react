{"version":3,"sources":["components/SearchBar.js","components/ContactRow.js","components/ContactTable.js","components/AddContactForm.js","components/AddContactModal.js","components/FilterableContactTable.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleFilterTextChange","bind","e","this","onFilterTextChange","target","value","filterText","Form","Control","type","className","placeholder","onChange","Component","ContactRow","Container","fluid","Row","Col","xs","Image","src","roundedCircle","name","phone","Button","variant","onClick","onRemoveContact","ContactTable","users","filter","item","toLowerCase","includes","map","key","AddContactForm","handleNameTextChange","handlePhoneTextChange","onNameTextChange","onPhoneTextChange","Group","newContact","AddContactModal","Modal","show","onHide","onClose","Header","closeButton","Title","Body","Footer","onSave","FilterableContactTable","state","handleRemoveContact","handleShow","handleClose","handleSave","setState","prevState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5369a2d1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport '../css/SearchBar.css';\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n    }\r\n  \r\n    handleFilterTextChange(e) {\r\n      this.props.onFilterTextChange(e.target.value);\r\n    };\r\n  \r\n    render() {\r\n      const filterText = this.props.filterText;\r\n      return (\r\n        <Form.Control type=\"text\" className=\"SearchBar\" placeholder=\"Search contacts\" value={filterText} onChange={this.handleFilterTextChange}/>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport {Image, Container, Row, Col, Button} from 'react-bootstrap';\r\n\r\nimport '../css/ContactRow.css';\r\n\r\nfunction ContactRow(props) {\r\n    return (\r\n      <Container fluid className=\"ContactRow\">\r\n          <Row>\r\n              <Col xs={4}>\r\n                <Image src=\"https://picsum.photos/200\"  className=\"ProfileImage\" roundedCircle/>\r\n              </Col>\r\n              <Col>\r\n                <h1 className=\"ProfileName\">{props.name}</h1>\r\n                <p className=\"ProfilePhone\">{props.phone}</p>\r\n              </Col>\r\n              <Col xs={3} className=\"RemoveButton\">\r\n                <Button variant=\"danger\" onClick={() => props.onRemoveContact(props.name, props.phone)}>Remove</Button>\r\n              </Col>\r\n          </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\nexport default ContactRow;","import React from 'react';\r\nimport ContactRow from './ContactRow';\r\n\r\nimport {Container, Row} from 'react-bootstrap';\r\n\r\nfunction ContactTable(props) {\r\n    return (\r\n      <Container className=\"ContactTable\">\r\n        {props.users.filter(item => props.filterText!=='' ? item.name.toLowerCase().includes(props.filterText.toLowerCase()) : true).map(item => (<Row><ContactRow name={item.name} phone={'+'+item.phone} key={item.name+item.phone} onRemoveContact={props.onRemoveContact}/></Row>))}\r\n      </Container>\r\n    );\r\n  }\r\n\r\nexport default ContactTable;","import React, {Component} from 'react';\r\n\r\nimport {Form} from 'react-bootstrap';\r\n\r\nclass AddContactForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameTextChange = this.handleNameTextChange.bind(this);\r\n        this.handlePhoneTextChange = this.handlePhoneTextChange.bind(this);\r\n    }\r\n\r\n    handleNameTextChange(e) {\r\n        this.props.onNameTextChange(e.target.value);\r\n    }\r\n\r\n    handlePhoneTextChange(e) {\r\n        this.props.onPhoneTextChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter name\" value={this.props.newContact.name} onChange={this.handleNameTextChange}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Control type=\"number\" placeholder=\"Enter phone number\" value={this.props.newContact.phone} onChange={this.handlePhoneTextChange}/>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContactForm;","import React, {Component} from 'react';\r\n\r\nimport AddContactForm from './AddContactForm';\r\n\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nclass AddContactModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (<Modal show={this.props.show} onHide={this.props.onClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Add Contact</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <AddContactForm newContact={this.props.newContact} onNameTextChange={this.props.onNameTextChange} onPhoneTextChange={this.props.onPhoneTextChange}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.props.onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={this.props.onSave}>\r\n                    Save Changes\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>);\r\n    }\r\n}\r\n\r\nexport default AddContactModal;","import React, { Component } from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport ContactTable from './ContactTable';\r\nimport AddContactModal from './AddContactModal';\r\n\r\nimport {Container, Row, Col, Button, Modal, Form} from 'react-bootstrap';\r\n\r\nimport '../css/FilterableContactTable.css';\r\n\r\nclass FilterableContactTable extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        filterText: '',\r\n        users: props.users,\r\n        show: false,\r\n        newContact: {\r\n            name: '',\r\n            phone: ''\r\n        }\r\n      };\r\n      this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\r\n      this.handleRemoveContact = this.handleRemoveContact.bind(this);\r\n      this.handleShow = this.handleShow.bind(this);\r\n      this.handleClose = this.handleClose.bind(this);\r\n      this.handleSave = this.handleSave.bind(this);\r\n      this.handleNameTextChange = this.handleNameTextChange.bind(this);\r\n      this.handlePhoneTextChange = this.handlePhoneTextChange.bind(this);\r\n    }\r\n  \r\n    handleFilterTextChange(filterText) {\r\n      this.setState({\r\n        filterText: filterText\r\n      });\r\n    }\r\n  \r\n    handleRemoveContact(name, phone) {\r\n      this.setState({\r\n        users: this.state.users.filter(item => item.name!==name && item.phone!==phone)\r\n      });\r\n    }\r\n    \r\n    handleShow() {\r\n        this.setState({\r\n            show: true\r\n        });\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            show: false\r\n        });\r\n    }\r\n\r\n    handleSave() {\r\n        this.setState({\r\n            users: [...this.state.users, this.state.newContact],\r\n            newContact: {\r\n                name: '',\r\n                phone: ''\r\n            }\r\n        });\r\n        this.handleClose();\r\n    }\r\n\r\n    handleNameTextChange(name) {\r\n        this.setState(prevState => ({\r\n            newContact: {\r\n                ...prevState.newContact,\r\n                name: name\r\n            }\r\n        }));\r\n    }\r\n\r\n    handlePhoneTextChange(phone) {\r\n        this.setState(prevState => ({\r\n            newContact: {\r\n                ...prevState.newContact,\r\n                phone: phone\r\n            }\r\n        }));\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <Container fluid className=\"FilterableContactTable\">\r\n            <Row>\r\n                <Col>\r\n                    <SearchBar filterText={this.state.filterText} onFilterTextChange={this.handleFilterTextChange}/>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" onClick={this.handleShow}>Add Contact</Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <ContactTable users={this.state.users} filterText={this.state.filterText} onRemoveContact={this.handleRemoveContact}/>\r\n                </Col>\r\n            </Row>\r\n            <AddContactModal show={this.state.show} onClose={this.handleClose} onSave={this.handleSave} newContact={this.state.newContact} onNameTextChange={this.handleNameTextChange} onPhoneTextChange={this.handlePhoneTextChange}/>\r\n        </Container>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n  export default FilterableContactTable;","import React from 'react';\r\nimport FilterableContactTable from './FilterableContactTable';\r\nimport '../css/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"App\">\r\n        <FilterableContactTable users={users}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst users = [\r\n\t{\"name\": \"Alex\", \"phone\": \"1234584\"},\r\n\t{\"name\": \"Jack\", \"phone\": \"6846846\"},\r\n\t{\"name\": \"Arman\", \"phone\": \"7984849\"},\r\n\t{\"name\": \"Fedor\", \"phone\": \"1234584\"},\r\n\t{\"name\": \"Lebron\", \"phone\": \"6846846\"},\r\n\t{\"name\": \"Messi\", \"phone\": \"7984849\"},\r\n]\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}